@page
@model AppOne.Pages.Documentations.DocumentationsModel

@{
    ViewData["Title"] = "Documentation Editor";
}

<div style="display: flex; height: 100vh;">
    <!-- Sidebar -->
    <div style="width: 20%; border-right: 1px solid #ccc; padding: 10px;">
        <h3>Documentation</h3>
        <ul>
            @foreach (var topic in Model.Documentations)
            {
                <li style="cursor: pointer; color: darkblue;" onclick="loadTopicContent(@topic.Id)">
                    @topic.Name
                </li>
            }
        </ul>
    </div>

    <!-- Content Area -->
    <div style="width: 80%; padding: 10px;">
        <h3 id="topicTitle">Select a documentation</h3>
        <div id="editor" style="height: 400px;"></div> <!-- Quill editor container -->
    </div>
</div>

<!-- Include Quill.js from CDN -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<!-- Include Emoji picker plugin (Optional) -->
<script src="https://cdn.quilljs.com/1.3.6/quill.emoji.min.js"></script>

<script>
    let quillInstance;
    let currentTopicId = null;

    // Initialize Quill editor with all features enabled
    document.addEventListener('DOMContentLoaded', function () {
        quillInstance = new Quill('#editor', {
            theme: 'snow',
            readOnly: false, // Editable mode
            modules: {
                toolbar: [
                    [{ 'header': '1' }, { 'header': '2' }, { 'header': '3' }, { 'font': [] }],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                    [{ 'indent': '-1' }, { 'indent': '+1' }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'align': [] }],
                    ['link', 'image', 'video'],
                    [{ 'color': [] }, { 'background': [] }],
                    ['blockquote', 'code-block'],
                    [{ 'direction': 'rtl' }],
                    ['clean'], // Clean formatting button
                    ['subscript', 'superscript'], // Subscript/Superscript
                    ['hr'], // Horizontal rule
                    ['table'], // Table (plugin required)
                    ['emoji'], // Emoji support (requires plugin)
                    ['undo', 'redo'], // Undo/Redo
                ],
                clipboard: {
                    matchVisual: false
                }
            }
        });
    });

    // Load documentation content dynamically
    async function loadTopicContent(docId) {
        currentTopicId = docId;

        // Clear UI while loading
        document.getElementById('topicTitle').textContent = 'Loading...';
        quillInstance.root.innerHTML = ''; // Clear editor content

        try {
            const response = await fetch(`/documentations/GetContent?docId=${docId}`);
            if (!response.ok) throw new Error('Failed to fetch content.');

            const data = await response.json();
            if (data && data.name && data.content) {
                document.getElementById('topicTitle').textContent = data.name;
                quillInstance.root.innerHTML = data.content; // Set the editor content
            } else {
                throw new Error('Invalid content structure.');
            }
        } catch (error) {
            console.error('Error loading content:', error);
            document.getElementById('topicTitle').textContent = `Error: ${error.message}`;
        }
    }

    // Save content periodically
    setInterval(async () => {
        if (currentTopicId && quillInstance) {
            const content = quillInstance.root.innerHTML;

            try {
                const response = await fetch(`/documentations/SaveContent`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ docId: currentTopicId, content }),
                });

                if (!response.ok) throw new Error('Failed to save content.');
                console.log('Content autosaved.');
            } catch (error) {
                console.error('Error saving content:', error);
            }
        }
    }, 5000); // Autosave every 5 seconds
</script>
